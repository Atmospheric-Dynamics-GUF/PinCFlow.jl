"""
    compute_orographic_mode(displm::AbstractFloat, wnk::AbstractFloat, wnl::AbstractFloat, uavg::AbstractFloat, vavg::AbstractFloat, rhoavg::AbstractFloat, bvsavg::AbstractFloat, fc::AbstractFloat, branch::Integer) -> Tuple

Compute orographic gravity wave mode characteristics.

Calculates the intrinsic frequency, wavenumbers, and wave action density
for a gravity wave mode generated by flow over topography, using linear
mountain wave theory.

# Arguments

  - `displm::AbstractFloat`: Topographic displacement amplitude for this mode
  - `wnk::AbstractFloat`: Horizontal wavenumber in x-direction
  - `wnl::AbstractFloat`: Horizontal wavenumber in y-direction
  - `uavg::AbstractFloat`: Vertically averaged background zonal wind
  - `vavg::AbstractFloat`: Vertically averaged background meridional wind
  - `rhoavg::AbstractFloat`: Vertically averaged background density
  - `bvsavg::AbstractFloat`: Vertically averaged Brunt-Väisälä frequency squared
  - `fc::AbstractFloat`: Coriolis parameter
  - `branch::Integer`: Frequency branch (+1 or -1)

# Returns

  - `Tuple{AbstractFloat, AbstractFloat, AbstractFloat, AbstractFloat, AbstractFloat}`:

      + `omi`: Intrinsic frequency
      + `wnk`: Adjusted horizontal wavenumber (x-direction)
      + `wnl`: Adjusted horizontal wavenumber (y-direction)
      + `wnm`: Vertical wavenumber
      + `wad`: Wave action density

# Linear Mountain Wave Theory

For steady flow over topography, the wave characteristics are determined by:

## Dispersion Relation

`ω² = N² · k_h² / (k_h² + m²) + f² · m² / (k_h² + m²)`

where:

  - `ω`: Intrinsic frequency
  - `N²`: Brunt-Väisälä frequency squared
  - `k_h`: Horizontal wavenumber magnitude `√(k² + l²)`
  - `m`: Vertical wavenumber
  - `f`: Coriolis parameter

## Intrinsic Frequency

`ω = -u·k - v·l` (Doppler shifted by background flow)

## Vertical Wavenumber

For propagating waves: `m² = k_h² · (N² - ω²) / (ω² - f²)`

## Wave Action Density

From linear theory: `A = ρ₀ · h₀² · ω · (k_h² + m²) / (2 · k_h²)`

where `h₀` is the topographic displacement amplitude.

# Propagation Conditions

Waves propagate vertically only if:

 1. `|ω| > f` (above inertial frequency)
 2. `|ω| < N` (below buoyancy frequency)
 3. `m²` is real and positive

# Critical Levels

  - **Inertial critical level**: `ω = ±f` (rays absorbed/reflected)
  - **Buoyancy critical level**: `ω = ±N` (waves become evanescent)

# Branch Selection

The `branch` parameter (+1 or -1) determines the sign of the frequency
and corresponding wavenumber adjustments to maintain consistency.

# Error Handling

Returns zero wave action if:

  - Propagation conditions are violated
  - Computed values are NaN (numerical issues)
  - Critical levels prevent wave propagation

# Applications

Used in orographic gravity wave parameterizations for:
    # Compute horizontal wavenumber.
  - Mountain wave drag calculations
  - Momentum flux estimates
  - Wave energy budget studies    # Compute intrinsic frequency from orographic wavenumbers.
"""
function compute_orographic_mode(
    displm::AbstractFloat,
    wnk::AbstractFloat,
    wnl::AbstractFloat,
    uavg::AbstractFloat,
    vavg::AbstractFloat,
    rhoavg::AbstractFloat,
    bvsavg::AbstractFloat,
    fc::AbstractFloat,
    branch::Integer,
)

    # Compute horizontal wavenumber.
    wnh = sqrt(wnk^2 + wnl^2)

    # Compute intrinsic frequency from orographic wavenumbers.
    omi = -uavg * wnk - vavg * wnl

    # Adjust the signs to be consistent with the chosen frequency
    # branch.
    if omi * branch < 0
        omi = -omi
        wnk = -wnk
        wnl = -wnl
    end

    # Compute vertical wavenumber and wave-action density.
    if omi^2 > fc^2 && omi^2 < bvsavg

        # Compute vertical wavenumber.
        wnm = -branch * sqrt(wnh^2 * (bvsavg - omi^2) / (omi^2 - fc^2))

        # Compute wave-action density.
        wad = rhoavg / 2 * displm^2 * omi * (wnh^2 + wnm^2) / wnh^2

        # Set to zero if something went wrong.
        if wad != wad || wnm != wnm
            wad = 0.0
            wnm = 0.0
        end

        # Account for critical and reflecting levels.
    else
        wad = 0.0
        wnm = 0.0
    end

    # Return.
    return (omi, wnk, wnl, wnm, wad)
end
